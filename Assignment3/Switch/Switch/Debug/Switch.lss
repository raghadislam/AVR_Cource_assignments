
Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b16  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ee8  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000638  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 67 05 	call	0xace	; 0xace <main>
  7a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	87 e9       	ldi	r24, 0x97	; 151
  96:	80 83       	st	Z, r24
  98:	e7 e3       	ldi	r30, 0x37	; 55
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	86 e9       	ldi	r24, 0x96	; 150
  9e:	80 83       	st	Z, r24
  a0:	e4 e3       	ldi	r30, 0x34	; 52
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	84 e9       	ldi	r24, 0x94	; 148
  a6:	80 83       	st	Z, r24
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	86 e9       	ldi	r24, 0x96	; 150
  ae:	80 83       	st	Z, r24
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	e8 e3       	ldi	r30, 0x38	; 56
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8a e5       	ldi	r24, 0x5A	; 90
  bc:	80 83       	st	Z, r24
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	89 e5       	ldi	r24, 0x59	; 89
  c4:	80 83       	st	Z, r24
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8a e5       	ldi	r24, 0x5A	; 90
  cc:	80 83       	st	Z, r24
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <DIO_enuSetPortDir>:

	return Local_enuErrorState;
}


ES_t DIO_enuSetPortDir (u8 Copy_u8PortID , u8 Copy_u8Val ){
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDir+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPortDir+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	a0 f5       	brcc	.+104    	; 0x15e <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	3d 83       	std	Y+5, r19	; 0x05
  fe:	2c 83       	std	Y+4, r18	; 0x04
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	9d 81       	ldd	r25, Y+5	; 0x05
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	d1 f0       	breq	.+52     	; 0x13e <DIO_enuSetPortDir+0x64>
 10a:	2c 81       	ldd	r18, Y+4	; 0x04
 10c:	3d 81       	ldd	r19, Y+5	; 0x05
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	2c f4       	brge	.+10     	; 0x11e <DIO_enuSetPortDir+0x44>
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	9d 81       	ldd	r25, Y+5	; 0x05
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	61 f0       	breq	.+24     	; 0x134 <DIO_enuSetPortDir+0x5a>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <DIO_enuSetPortDir+0x80>
 11e:	2c 81       	ldd	r18, Y+4	; 0x04
 120:	3d 81       	ldd	r19, Y+5	; 0x05
 122:	22 30       	cpi	r18, 0x02	; 2
 124:	31 05       	cpc	r19, r1
 126:	81 f0       	breq	.+32     	; 0x148 <DIO_enuSetPortDir+0x6e>
 128:	8c 81       	ldd	r24, Y+4	; 0x04
 12a:	9d 81       	ldd	r25, Y+5	; 0x05
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	91 05       	cpc	r25, r1
 130:	81 f0       	breq	.+32     	; 0x152 <DIO_enuSetPortDir+0x78>
 132:	13 c0       	rjmp	.+38     	; 0x15a <DIO_enuSetPortDir+0x80>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Val;
 134:	ea e3       	ldi	r30, 0x3A	; 58
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
 13c:	0e c0       	rjmp	.+28     	; 0x15a <DIO_enuSetPortDir+0x80>
			break;
		case DIO_PORTB :
			DDRB = Copy_u8Val;
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	80 83       	st	Z, r24
 146:	09 c0       	rjmp	.+18     	; 0x15a <DIO_enuSetPortDir+0x80>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Val;
 148:	e4 e3       	ldi	r30, 0x34	; 52
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	80 83       	st	Z, r24
 150:	04 c0       	rjmp	.+8      	; 0x15a <DIO_enuSetPortDir+0x80>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Val;
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 15a:	19 82       	std	Y+1, r1	; 0x01
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_enuSetPortDir+0x88>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
 162:	89 81       	ldd	r24, Y+1	; 0x01
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <DIO_enuSetPortVal>:


ES_t DIO_enuSetPortVal( u8 Copy_u8PortID , u8 Copy_u8Val ){
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortVal+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enuSetPortVal+0x8>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	a0 f5       	brcc	.+104    	; 0x1f8 <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortID)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3d 83       	std	Y+5, r19	; 0x05
 198:	2c 83       	std	Y+4, r18	; 0x04
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	9d 81       	ldd	r25, Y+5	; 0x05
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <DIO_enuSetPortVal+0x64>
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <DIO_enuSetPortVal+0x44>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	61 f0       	breq	.+24     	; 0x1ce <DIO_enuSetPortVal+0x5a>
 1b6:	1e c0       	rjmp	.+60     	; 0x1f4 <DIO_enuSetPortVal+0x80>
 1b8:	2c 81       	ldd	r18, Y+4	; 0x04
 1ba:	3d 81       	ldd	r19, Y+5	; 0x05
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <DIO_enuSetPortVal+0x6e>
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	9d 81       	ldd	r25, Y+5	; 0x05
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	81 f0       	breq	.+32     	; 0x1ec <DIO_enuSetPortVal+0x78>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <DIO_enuSetPortVal+0x80>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
 1ce:	eb e3       	ldi	r30, 0x3B	; 59
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTB :
			PORTB = Copy_u8Val;
 1d8:	e8 e3       	ldi	r30, 0x38	; 56
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 83       	st	Z, r24
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTC :
			PORTC = Copy_u8Val;
 1e2:	e5 e3       	ldi	r30, 0x35	; 53
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	80 83       	st	Z, r24
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <DIO_enuSetPortVal+0x80>
			break;
		case DIO_PORTD :
			PORTD = Copy_u8Val;
 1ec:	e2 e3       	ldi	r30, 0x32	; 50
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	80 83       	st	Z, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_enuSetPortVal+0x88>
	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	cf 91       	pop	r28
 20a:	df 91       	pop	r29
 20c:	08 95       	ret

0000020e <DIO_enuTogglePort>:


ES_t DIO_enuTogglePort( u8 Copy_u8PortID ){
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuTogglePort+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <DIO_enuTogglePort+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	08 f0       	brcs	.+2      	; 0x228 <DIO_enuTogglePort+0x1a>
 226:	40 c0       	rjmp	.+128    	; 0x2a8 <DIO_enuTogglePort+0x9a>
	{
		switch(Copy_u8PortID)
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	3c 83       	std	Y+4, r19	; 0x04
 230:	2b 83       	std	Y+3, r18	; 0x03
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	e9 f0       	breq	.+58     	; 0x276 <DIO_enuTogglePort+0x68>
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	3c 81       	ldd	r19, Y+4	; 0x04
 240:	22 30       	cpi	r18, 0x02	; 2
 242:	31 05       	cpc	r19, r1
 244:	2c f4       	brge	.+10     	; 0x250 <DIO_enuTogglePort+0x42>
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	9c 81       	ldd	r25, Y+4	; 0x04
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	61 f0       	breq	.+24     	; 0x266 <DIO_enuTogglePort+0x58>
 24e:	2a c0       	rjmp	.+84     	; 0x2a4 <DIO_enuTogglePort+0x96>
 250:	2b 81       	ldd	r18, Y+3	; 0x03
 252:	3c 81       	ldd	r19, Y+4	; 0x04
 254:	22 30       	cpi	r18, 0x02	; 2
 256:	31 05       	cpc	r19, r1
 258:	b1 f0       	breq	.+44     	; 0x286 <DIO_enuTogglePort+0x78>
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	9c 81       	ldd	r25, Y+4	; 0x04
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	91 05       	cpc	r25, r1
 262:	c9 f0       	breq	.+50     	; 0x296 <DIO_enuTogglePort+0x88>
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <DIO_enuTogglePort+0x96>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
 266:	ab e3       	ldi	r26, 0x3B	; 59
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	eb e3       	ldi	r30, 0x3B	; 59
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 95       	com	r24
 272:	8c 93       	st	X, r24
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <DIO_enuTogglePort+0x96>
			break;
		case DIO_PORTB :
			PORTB = ~PORTB;
 276:	a8 e3       	ldi	r26, 0x38	; 56
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e8 e3       	ldi	r30, 0x38	; 56
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 95       	com	r24
 282:	8c 93       	st	X, r24
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <DIO_enuTogglePort+0x96>
			break;
		case DIO_PORTC :
			PORTC = ~PORTC;
 286:	a5 e3       	ldi	r26, 0x35	; 53
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e5 e3       	ldi	r30, 0x35	; 53
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 95       	com	r24
 292:	8c 93       	st	X, r24
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <DIO_enuTogglePort+0x96>
			break;
		case DIO_PORTD :
			PORTD = ~PORTD;
 296:	a2 e3       	ldi	r26, 0x32	; 50
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e2 e3       	ldi	r30, 0x32	; 50
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	80 95       	com	r24
 2a2:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuTogglePort+0x9e>
	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	08 95       	ret

000002bc <DIO_enuGetPortVal>:


ES_t DIO_enuGetPortVal( u8 Copy_u8PortID , u8* Copy_pu8Val ){
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortVal+0x6>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortVal+0x8>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <DIO_enuGetPortVal+0xa>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	7c 83       	std	Y+4, r23	; 0x04
 2ce:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Val != NULL)
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	9c 81       	ldd	r25, Y+4	; 0x04
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_enuGetPortVal+0x22>
 2dc:	42 c0       	rjmp	.+132    	; 0x362 <DIO_enuGetPortVal+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	e0 f5       	brcc	.+120    	; 0x35c <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	3e 83       	std	Y+6, r19	; 0x06
 2ec:	2d 83       	std	Y+5, r18	; 0x05
 2ee:	8d 81       	ldd	r24, Y+5	; 0x05
 2f0:	9e 81       	ldd	r25, Y+6	; 0x06
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 05       	cpc	r25, r1
 2f6:	e1 f0       	breq	.+56     	; 0x330 <DIO_enuGetPortVal+0x74>
 2f8:	2d 81       	ldd	r18, Y+5	; 0x05
 2fa:	3e 81       	ldd	r19, Y+6	; 0x06
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	2c f4       	brge	.+10     	; 0x30c <DIO_enuGetPortVal+0x50>
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	61 f0       	breq	.+24     	; 0x322 <DIO_enuGetPortVal+0x66>
 30a:	26 c0       	rjmp	.+76     	; 0x358 <DIO_enuGetPortVal+0x9c>
 30c:	2d 81       	ldd	r18, Y+5	; 0x05
 30e:	3e 81       	ldd	r19, Y+6	; 0x06
 310:	22 30       	cpi	r18, 0x02	; 2
 312:	31 05       	cpc	r19, r1
 314:	a1 f0       	breq	.+40     	; 0x33e <DIO_enuGetPortVal+0x82>
 316:	8d 81       	ldd	r24, Y+5	; 0x05
 318:	9e 81       	ldd	r25, Y+6	; 0x06
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	91 05       	cpc	r25, r1
 31e:	b1 f0       	breq	.+44     	; 0x34c <DIO_enuGetPortVal+0x90>
 320:	1b c0       	rjmp	.+54     	; 0x358 <DIO_enuGetPortVal+0x9c>
			{
			case DIO_PORTA :
				*Copy_pu8Val = PINA;
 322:	e9 e3       	ldi	r30, 0x39	; 57
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	eb 81       	ldd	r30, Y+3	; 0x03
 32a:	fc 81       	ldd	r31, Y+4	; 0x04
 32c:	80 83       	st	Z, r24
 32e:	14 c0       	rjmp	.+40     	; 0x358 <DIO_enuGetPortVal+0x9c>
				break;
			case DIO_PORTB :
				*Copy_pu8Val = PINB;
 330:	e6 e3       	ldi	r30, 0x36	; 54
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	eb 81       	ldd	r30, Y+3	; 0x03
 338:	fc 81       	ldd	r31, Y+4	; 0x04
 33a:	80 83       	st	Z, r24
 33c:	0d c0       	rjmp	.+26     	; 0x358 <DIO_enuGetPortVal+0x9c>
				break;
			case DIO_PORTC :
				*Copy_pu8Val = PINC;
 33e:	e3 e3       	ldi	r30, 0x33	; 51
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	eb 81       	ldd	r30, Y+3	; 0x03
 346:	fc 81       	ldd	r31, Y+4	; 0x04
 348:	80 83       	st	Z, r24
 34a:	06 c0       	rjmp	.+12     	; 0x358 <DIO_enuGetPortVal+0x9c>
				break;
			case DIO_PORTD :
				*Copy_pu8Val = PIND;
 34c:	e0 e3       	ldi	r30, 0x30	; 48
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	eb 81       	ldd	r30, Y+3	; 0x03
 354:	fc 81       	ldd	r31, Y+4	; 0x04
 356:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
 358:	19 82       	std	Y+1, r1	; 0x01
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_enuGetPortVal+0xaa>
		}
		else Local_enuErrorState = ES_OUT_OF_RANGE;
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_enuGetPortVal+0xaa>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
 366:	89 81       	ldd	r24, Y+1	; 0x01
}
 368:	26 96       	adiw	r28, 0x06	; 6
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	08 95       	ret

0000037a <DIO_enuSetPinDir>:



ES_t DIO_enuSetPinDir( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPinDir+0x6>
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPinDir+0x8>
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_enuSetPinDir+0xa>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	8a 83       	std	Y+2, r24	; 0x02
 38a:	6b 83       	std	Y+3, r22	; 0x03
 38c:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <DIO_enuSetPinDir+0x20>
 398:	d0 c0       	rjmp	.+416    	; 0x53a <DIO_enuSetPinDir+0x1c0>
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_enuSetPinDir+0x28>
 3a0:	cc c0       	rjmp	.+408    	; 0x53a <DIO_enuSetPinDir+0x1c0>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_enuSetPinDir+0x30>
 3a8:	c8 c0       	rjmp	.+400    	; 0x53a <DIO_enuSetPinDir+0x1c0>
	{

		switch(Copy_u8PortID)
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	3e 83       	std	Y+6, r19	; 0x06
 3b2:	2d 83       	std	Y+5, r18	; 0x05
 3b4:	6d 81       	ldd	r22, Y+5	; 0x05
 3b6:	7e 81       	ldd	r23, Y+6	; 0x06
 3b8:	61 30       	cpi	r22, 0x01	; 1
 3ba:	71 05       	cpc	r23, r1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_enuSetPinDir+0x46>
 3be:	41 c0       	rjmp	.+130    	; 0x442 <DIO_enuSetPinDir+0xc8>
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	91 05       	cpc	r25, r1
 3c8:	34 f4       	brge	.+12     	; 0x3d6 <DIO_enuSetPinDir+0x5c>
 3ca:	2d 81       	ldd	r18, Y+5	; 0x05
 3cc:	3e 81       	ldd	r19, Y+6	; 0x06
 3ce:	21 15       	cp	r18, r1
 3d0:	31 05       	cpc	r19, r1
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <DIO_enuSetPinDir+0x76>
 3d4:	b0 c0       	rjmp	.+352    	; 0x536 <DIO_enuSetPinDir+0x1bc>
 3d6:	6d 81       	ldd	r22, Y+5	; 0x05
 3d8:	7e 81       	ldd	r23, Y+6	; 0x06
 3da:	62 30       	cpi	r22, 0x02	; 2
 3dc:	71 05       	cpc	r23, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_enuSetPinDir+0x68>
 3e0:	59 c0       	rjmp	.+178    	; 0x494 <DIO_enuSetPinDir+0x11a>
 3e2:	8d 81       	ldd	r24, Y+5	; 0x05
 3e4:	9e 81       	ldd	r25, Y+6	; 0x06
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	91 05       	cpc	r25, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enuSetPinDir+0x74>
 3ec:	7c c0       	rjmp	.+248    	; 0x4e6 <DIO_enuSetPinDir+0x16c>
 3ee:	a3 c0       	rjmp	.+326    	; 0x536 <DIO_enuSetPinDir+0x1bc>
		{
		case DIO_PORTA :
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 3f0:	aa e3       	ldi	r26, 0x3A	; 58
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ea e3       	ldi	r30, 0x3A	; 58
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_enuSetPinDir+0x92>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_enuSetPinDir+0x8e>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Val << Copy_u8PinID);
 416:	aa e3       	ldi	r26, 0x3A	; 58
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	ea e3       	ldi	r30, 0x3A	; 58
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_enuSetPinDir+0xbc>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_enuSetPinDir+0xb8>
 43a:	cb 01       	movw	r24, r22
 43c:	84 2b       	or	r24, r20
 43e:	8c 93       	st	X, r24
 440:	7a c0       	rjmp	.+244    	; 0x536 <DIO_enuSetPinDir+0x1bc>
			break;
		case DIO_PORTB :
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 442:	a7 e3       	ldi	r26, 0x37	; 55
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e3       	ldi	r30, 0x37	; 55
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_enuSetPinDir+0xe4>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	2a 95       	dec	r18
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_enuSetPinDir+0xe0>
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Val << Copy_u8PinID);
 468:	a7 e3       	ldi	r26, 0x37	; 55
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e7 e3       	ldi	r30, 0x37	; 55
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_enuSetPinDir+0x10e>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_enuSetPinDir+0x10a>
 48c:	cb 01       	movw	r24, r22
 48e:	84 2b       	or	r24, r20
 490:	8c 93       	st	X, r24
 492:	51 c0       	rjmp	.+162    	; 0x536 <DIO_enuSetPinDir+0x1bc>
			break;
		case DIO_PORTC :
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 494:	a4 e3       	ldi	r26, 0x34	; 52
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e4 e3       	ldi	r30, 0x34	; 52
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_enuSetPinDir+0x136>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_enuSetPinDir+0x132>
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Val << Copy_u8PinID);
 4ba:	a4 e3       	ldi	r26, 0x34	; 52
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e4 e3       	ldi	r30, 0x34	; 52
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_enuSetPinDir+0x160>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_enuSetPinDir+0x15c>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	28 c0       	rjmp	.+80     	; 0x536 <DIO_enuSetPinDir+0x1bc>
			break;
		case DIO_PORTD :
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 4e6:	a1 e3       	ldi	r26, 0x31	; 49
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e1 e3       	ldi	r30, 0x31	; 49
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_enuSetPinDir+0x188>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	2a 95       	dec	r18
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_enuSetPinDir+0x184>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Val << Copy_u8PinID);
 50c:	a1 e3       	ldi	r26, 0x31	; 49
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e1 e3       	ldi	r30, 0x31	; 49
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_enuSetPinDir+0x1b2>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_enuSetPinDir+0x1ae>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 536:	19 82       	std	Y+1, r1	; 0x01
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_enuSetPinDir+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
}
 540:	26 96       	adiw	r28, 0x06	; 6
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	cf 91       	pop	r28
 54e:	df 91       	pop	r29
 550:	08 95       	ret

00000552 <DIO_enuSetPinVal>:


ES_t DIO_enuSetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
 552:	df 93       	push	r29
 554:	cf 93       	push	r28
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPinVal+0x6>
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPinVal+0x8>
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_enuSetPinVal+0xa>
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	8a 83       	std	Y+2, r24	; 0x02
 562:	6b 83       	std	Y+3, r22	; 0x03
 564:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	84 30       	cpi	r24, 0x04	; 4
 56e:	08 f0       	brcs	.+2      	; 0x572 <DIO_enuSetPinVal+0x20>
 570:	d0 c0       	rjmp	.+416    	; 0x712 <DIO_enuSetPinVal+0x1c0>
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	88 30       	cpi	r24, 0x08	; 8
 576:	08 f0       	brcs	.+2      	; 0x57a <DIO_enuSetPinVal+0x28>
 578:	cc c0       	rjmp	.+408    	; 0x712 <DIO_enuSetPinVal+0x1c0>
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_enuSetPinVal+0x30>
 580:	c8 c0       	rjmp	.+400    	; 0x712 <DIO_enuSetPinVal+0x1c0>
	{

		switch(Copy_u8PortID)
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3e 83       	std	Y+6, r19	; 0x06
 58a:	2d 83       	std	Y+5, r18	; 0x05
 58c:	6d 81       	ldd	r22, Y+5	; 0x05
 58e:	7e 81       	ldd	r23, Y+6	; 0x06
 590:	61 30       	cpi	r22, 0x01	; 1
 592:	71 05       	cpc	r23, r1
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_enuSetPinVal+0x46>
 596:	41 c0       	rjmp	.+130    	; 0x61a <DIO_enuSetPinVal+0xc8>
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	34 f4       	brge	.+12     	; 0x5ae <DIO_enuSetPinVal+0x5c>
 5a2:	2d 81       	ldd	r18, Y+5	; 0x05
 5a4:	3e 81       	ldd	r19, Y+6	; 0x06
 5a6:	21 15       	cp	r18, r1
 5a8:	31 05       	cpc	r19, r1
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <DIO_enuSetPinVal+0x76>
 5ac:	b0 c0       	rjmp	.+352    	; 0x70e <DIO_enuSetPinVal+0x1bc>
 5ae:	6d 81       	ldd	r22, Y+5	; 0x05
 5b0:	7e 81       	ldd	r23, Y+6	; 0x06
 5b2:	62 30       	cpi	r22, 0x02	; 2
 5b4:	71 05       	cpc	r23, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_enuSetPinVal+0x68>
 5b8:	59 c0       	rjmp	.+178    	; 0x66c <DIO_enuSetPinVal+0x11a>
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	9e 81       	ldd	r25, Y+6	; 0x06
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	91 05       	cpc	r25, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_enuSetPinVal+0x74>
 5c4:	7c c0       	rjmp	.+248    	; 0x6be <DIO_enuSetPinVal+0x16c>
 5c6:	a3 c0       	rjmp	.+326    	; 0x70e <DIO_enuSetPinVal+0x1bc>
		{
		case DIO_PORTA :
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
 5c8:	ab e3       	ldi	r26, 0x3B	; 59
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	eb e3       	ldi	r30, 0x3B	; 59
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	48 2f       	mov	r20, r24
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuSetPinVal+0x92>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuSetPinVal+0x8e>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Val << Copy_u8PinID);
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	b9 01       	movw	r22, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuSetPinVal+0xbc>
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuSetPinVal+0xb8>
 612:	cb 01       	movw	r24, r22
 614:	84 2b       	or	r24, r20
 616:	8c 93       	st	X, r24
 618:	7a c0       	rjmp	.+244    	; 0x70e <DIO_enuSetPinVal+0x1bc>
			break;
		case DIO_PORTB :
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 61a:	a8 e3       	ldi	r26, 0x38	; 56
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e8 e3       	ldi	r30, 0x38	; 56
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_enuSetPinVal+0xe4>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	2a 95       	dec	r18
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_enuSetPinVal+0xe0>
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Val << Copy_u8PinID);
 640:	a8 e3       	ldi	r26, 0x38	; 56
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e8 e3       	ldi	r30, 0x38	; 56
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	48 2f       	mov	r20, r24
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b9 01       	movw	r22, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_enuSetPinVal+0x10e>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	8a 95       	dec	r24
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_enuSetPinVal+0x10a>
 664:	cb 01       	movw	r24, r22
 666:	84 2b       	or	r24, r20
 668:	8c 93       	st	X, r24
 66a:	51 c0       	rjmp	.+162    	; 0x70e <DIO_enuSetPinVal+0x1bc>
			break;
		case DIO_PORTC :
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 66c:	a5 e3       	ldi	r26, 0x35	; 53
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e5 e3       	ldi	r30, 0x35	; 53
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	48 2f       	mov	r20, r24
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_enuSetPinVal+0x136>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	2a 95       	dec	r18
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_enuSetPinVal+0x132>
 68c:	80 95       	com	r24
 68e:	84 23       	and	r24, r20
 690:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Val << Copy_u8PinID);
 692:	a5 e3       	ldi	r26, 0x35	; 53
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e5 e3       	ldi	r30, 0x35	; 53
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_enuSetPinVal+0x160>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_enuSetPinVal+0x15c>
 6b6:	cb 01       	movw	r24, r22
 6b8:	84 2b       	or	r24, r20
 6ba:	8c 93       	st	X, r24
 6bc:	28 c0       	rjmp	.+80     	; 0x70e <DIO_enuSetPinVal+0x1bc>
			break;
		case DIO_PORTD :
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 6be:	a2 e3       	ldi	r26, 0x32	; 50
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e2 e3       	ldi	r30, 0x32	; 50
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	48 2f       	mov	r20, r24
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enuSetPinVal+0x188>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	2a 95       	dec	r18
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enuSetPinVal+0x184>
 6de:	80 95       	com	r24
 6e0:	84 23       	and	r24, r20
 6e2:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Val << Copy_u8PinID);
 6e4:	a2 e3       	ldi	r26, 0x32	; 50
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e2 e3       	ldi	r30, 0x32	; 50
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8c 81       	ldd	r24, Y+4	; 0x04
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	b9 01       	movw	r22, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_enuSetPinVal+0x1b2>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_enuSetPinVal+0x1ae>
 708:	cb 01       	movw	r24, r22
 70a:	84 2b       	or	r24, r20
 70c:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 70e:	19 82       	std	Y+1, r1	; 0x01
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_enuSetPinVal+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 716:	89 81       	ldd	r24, Y+1	; 0x01
}
 718:	26 96       	adiw	r28, 0x06	; 6
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <DIO_enuTogglePin>:

ES_t DIO_enuTogglePin( u8 Copy_u8PortID , u8 Copy_u8PinID  ){
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_enuTogglePin+0x6>
 730:	00 d0       	rcall	.+0      	; 0x732 <DIO_enuTogglePin+0x8>
 732:	0f 92       	push	r0
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	8a 83       	std	Y+2, r24	; 0x02
 73a:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 )
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	84 30       	cpi	r24, 0x04	; 4
 744:	08 f0       	brcs	.+2      	; 0x748 <DIO_enuTogglePin+0x1e>
 746:	74 c0       	rjmp	.+232    	; 0x830 <DIO_enuTogglePin+0x106>
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	88 30       	cpi	r24, 0x08	; 8
 74c:	08 f0       	brcs	.+2      	; 0x750 <DIO_enuTogglePin+0x26>
 74e:	70 c0       	rjmp	.+224    	; 0x830 <DIO_enuTogglePin+0x106>
	{

		switch(Copy_u8PortID)
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	3d 83       	std	Y+5, r19	; 0x05
 758:	2c 83       	std	Y+4, r18	; 0x04
 75a:	8c 81       	ldd	r24, Y+4	; 0x04
 75c:	9d 81       	ldd	r25, Y+5	; 0x05
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	91 05       	cpc	r25, r1
 762:	49 f1       	breq	.+82     	; 0x7b6 <DIO_enuTogglePin+0x8c>
 764:	2c 81       	ldd	r18, Y+4	; 0x04
 766:	3d 81       	ldd	r19, Y+5	; 0x05
 768:	22 30       	cpi	r18, 0x02	; 2
 76a:	31 05       	cpc	r19, r1
 76c:	2c f4       	brge	.+10     	; 0x778 <DIO_enuTogglePin+0x4e>
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	9d 81       	ldd	r25, Y+5	; 0x05
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	61 f0       	breq	.+24     	; 0x78e <DIO_enuTogglePin+0x64>
 776:	5a c0       	rjmp	.+180    	; 0x82c <DIO_enuTogglePin+0x102>
 778:	2c 81       	ldd	r18, Y+4	; 0x04
 77a:	3d 81       	ldd	r19, Y+5	; 0x05
 77c:	22 30       	cpi	r18, 0x02	; 2
 77e:	31 05       	cpc	r19, r1
 780:	71 f1       	breq	.+92     	; 0x7de <DIO_enuTogglePin+0xb4>
 782:	8c 81       	ldd	r24, Y+4	; 0x04
 784:	9d 81       	ldd	r25, Y+5	; 0x05
 786:	83 30       	cpi	r24, 0x03	; 3
 788:	91 05       	cpc	r25, r1
 78a:	e9 f1       	breq	.+122    	; 0x806 <DIO_enuTogglePin+0xdc>
 78c:	4f c0       	rjmp	.+158    	; 0x82c <DIO_enuTogglePin+0x102>
		{
		case DIO_PORTA :
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
 78e:	ab e3       	ldi	r26, 0x3B	; 59
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	eb e3       	ldi	r30, 0x3B	; 59
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	48 2f       	mov	r20, r24
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	28 2f       	mov	r18, r24
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 2e       	mov	r0, r18
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_enuTogglePin+0x82>
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	0a 94       	dec	r0
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_enuTogglePin+0x7e>
 7b0:	84 27       	eor	r24, r20
 7b2:	8c 93       	st	X, r24
 7b4:	3b c0       	rjmp	.+118    	; 0x82c <DIO_enuTogglePin+0x102>
			break;
		case DIO_PORTB :
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
 7b6:	a8 e3       	ldi	r26, 0x38	; 56
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e8 e3       	ldi	r30, 0x38	; 56
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	48 2f       	mov	r20, r24
 7c2:	8b 81       	ldd	r24, Y+3	; 0x03
 7c4:	28 2f       	mov	r18, r24
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 2e       	mov	r0, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_enuTogglePin+0xaa>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_enuTogglePin+0xa6>
 7d8:	84 27       	eor	r24, r20
 7da:	8c 93       	st	X, r24
 7dc:	27 c0       	rjmp	.+78     	; 0x82c <DIO_enuTogglePin+0x102>
			break;
		case DIO_PORTC :
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
 7de:	a5 e3       	ldi	r26, 0x35	; 53
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	e5 e3       	ldi	r30, 0x35	; 53
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	48 2f       	mov	r20, r24
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 2e       	mov	r0, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_enuTogglePin+0xd2>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_enuTogglePin+0xce>
 800:	84 27       	eor	r24, r20
 802:	8c 93       	st	X, r24
 804:	13 c0       	rjmp	.+38     	; 0x82c <DIO_enuTogglePin+0x102>
			break;
		case DIO_PORTD :
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
 806:	a2 e3       	ldi	r26, 0x32	; 50
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e2 e3       	ldi	r30, 0x32	; 50
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	48 2f       	mov	r20, r24
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 2e       	mov	r0, r18
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_enuTogglePin+0xfa>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	0a 94       	dec	r0
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_enuTogglePin+0xf6>
 828:	84 27       	eor	r24, r20
 82a:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
 82c:	19 82       	std	Y+1, r1	; 0x01
 82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_enuTogglePin+0x10a>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 834:	89 81       	ldd	r24, Y+1	; 0x01
}
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	08 95       	ret

00000846 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8Val ){
 846:	df 93       	push	r29
 848:	cf 93       	push	r28
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	27 97       	sbiw	r28, 0x07	; 7
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	8a 83       	std	Y+2, r24	; 0x02
 85c:	6b 83       	std	Y+3, r22	; 0x03
 85e:	5d 83       	std	Y+5, r21	; 0x05
 860:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	89 83       	std	Y+1, r24	; 0x01


	if(Copy_pu8Val != NULL)
 866:	8c 81       	ldd	r24, Y+4	; 0x04
 868:	9d 81       	ldd	r25, Y+5	; 0x05
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	09 f4       	brne	.+2      	; 0x870 <__stack+0x11>
 86e:	7d c0       	rjmp	.+250    	; 0x96a <__stack+0x10b>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 )
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	84 30       	cpi	r24, 0x04	; 4
 874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
 876:	76 c0       	rjmp	.+236    	; 0x964 <__stack+0x105>
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 30       	cpi	r24, 0x08	; 8
 87c:	08 f0       	brcs	.+2      	; 0x880 <__stack+0x21>
 87e:	72 c0       	rjmp	.+228    	; 0x964 <__stack+0x105>
		{
			switch(Copy_u8PortID)
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	3f 83       	std	Y+7, r19	; 0x07
 888:	2e 83       	std	Y+6, r18	; 0x06
 88a:	4e 81       	ldd	r20, Y+6	; 0x06
 88c:	5f 81       	ldd	r21, Y+7	; 0x07
 88e:	41 30       	cpi	r20, 0x01	; 1
 890:	51 05       	cpc	r21, r1
 892:	59 f1       	breq	.+86     	; 0x8ea <__stack+0x8b>
 894:	8e 81       	ldd	r24, Y+6	; 0x06
 896:	9f 81       	ldd	r25, Y+7	; 0x07
 898:	82 30       	cpi	r24, 0x02	; 2
 89a:	91 05       	cpc	r25, r1
 89c:	34 f4       	brge	.+12     	; 0x8aa <__stack+0x4b>
 89e:	2e 81       	ldd	r18, Y+6	; 0x06
 8a0:	3f 81       	ldd	r19, Y+7	; 0x07
 8a2:	21 15       	cp	r18, r1
 8a4:	31 05       	cpc	r19, r1
 8a6:	69 f0       	breq	.+26     	; 0x8c2 <__stack+0x63>
 8a8:	5b c0       	rjmp	.+182    	; 0x960 <__stack+0x101>
 8aa:	4e 81       	ldd	r20, Y+6	; 0x06
 8ac:	5f 81       	ldd	r21, Y+7	; 0x07
 8ae:	42 30       	cpi	r20, 0x02	; 2
 8b0:	51 05       	cpc	r21, r1
 8b2:	79 f1       	breq	.+94     	; 0x912 <__stack+0xb3>
 8b4:	8e 81       	ldd	r24, Y+6	; 0x06
 8b6:	9f 81       	ldd	r25, Y+7	; 0x07
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	91 05       	cpc	r25, r1
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
 8be:	3d c0       	rjmp	.+122    	; 0x93a <__stack+0xdb>
 8c0:	4f c0       	rjmp	.+158    	; 0x960 <__stack+0x101>
			{
			case DIO_PORTA :
				*Copy_pu8Val = (PINA>>Copy_u8PinID) & DIO_MASK_BIT;
 8c2:	e9 e3       	ldi	r30, 0x39	; 57
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	8b 81       	ldd	r24, Y+3	; 0x03
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	a9 01       	movw	r20, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	55 95       	asr	r21
 8d8:	47 95       	ror	r20
 8da:	8a 95       	dec	r24
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	ca 01       	movw	r24, r20
 8e0:	81 70       	andi	r24, 0x01	; 1
 8e2:	ec 81       	ldd	r30, Y+4	; 0x04
 8e4:	fd 81       	ldd	r31, Y+5	; 0x05
 8e6:	80 83       	st	Z, r24
 8e8:	3b c0       	rjmp	.+118    	; 0x960 <__stack+0x101>
				break;
			case DIO_PORTB :
				*Copy_pu8Val = (PINB>>Copy_u8PinID) & DIO_MASK_BIT;
 8ea:	e6 e3       	ldi	r30, 0x36	; 54
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	8b 81       	ldd	r24, Y+3	; 0x03
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	a9 01       	movw	r20, r18
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	55 95       	asr	r21
 900:	47 95       	ror	r20
 902:	8a 95       	dec	r24
 904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
 906:	ca 01       	movw	r24, r20
 908:	81 70       	andi	r24, 0x01	; 1
 90a:	ec 81       	ldd	r30, Y+4	; 0x04
 90c:	fd 81       	ldd	r31, Y+5	; 0x05
 90e:	80 83       	st	Z, r24
 910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x101>
				break;
			case DIO_PORTC :
				*Copy_pu8Val = (PINC>>Copy_u8PinID) & DIO_MASK_BIT;
 912:	e3 e3       	ldi	r30, 0x33	; 51
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	88 2f       	mov	r24, r24
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	a9 01       	movw	r20, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
 926:	55 95       	asr	r21
 928:	47 95       	ror	r20
 92a:	8a 95       	dec	r24
 92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
 92e:	ca 01       	movw	r24, r20
 930:	81 70       	andi	r24, 0x01	; 1
 932:	ec 81       	ldd	r30, Y+4	; 0x04
 934:	fd 81       	ldd	r31, Y+5	; 0x05
 936:	80 83       	st	Z, r24
 938:	13 c0       	rjmp	.+38     	; 0x960 <__stack+0x101>
				break;
			case DIO_PORTD :
				*Copy_pu8Val = (PIND>>Copy_u8PinID) & DIO_MASK_BIT;
 93a:	e0 e3       	ldi	r30, 0x30	; 48
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	28 2f       	mov	r18, r24
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	88 2f       	mov	r24, r24
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a9 01       	movw	r20, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
 94e:	55 95       	asr	r21
 950:	47 95       	ror	r20
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <__stack+0xef>
 956:	ca 01       	movw	r24, r20
 958:	81 70       	andi	r24, 0x01	; 1
 95a:	ec 81       	ldd	r30, Y+4	; 0x04
 95c:	fd 81       	ldd	r31, Y+5	; 0x05
 95e:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
 960:	19 82       	std	Y+1, r1	; 0x01
 962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x10f>
		}
		else Local_enuErrorState = ES_OUT_OF_RANGE;
 964:	83 e0       	ldi	r24, 0x03	; 3
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
 96a:	82 e0       	ldi	r24, 0x02	; 2
 96c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 96e:	89 81       	ldd	r24, Y+1	; 0x01
}
 970:	27 96       	adiw	r28, 0x07	; 7
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <Switch_enuInit>:
#include "Switch_priv.h"
#include "Switch_config.h"

#include "DIO_int.h"

ES_t Switch_enuInit(SW_t* Copy_ArrStrSwitchState ){
 982:	df 93       	push	r29
 984:	cf 93       	push	r28
 986:	00 d0       	rcall	.+0      	; 0x988 <Switch_enuInit+0x6>
 988:	00 d0       	rcall	.+0      	; 0x98a <Switch_enuInit+0x8>
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	9c 83       	std	Y+4, r25	; 0x04
 990:	8b 83       	std	Y+3, r24	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_ArrStrSwitchState != NULL){
 996:	8b 81       	ldd	r24, Y+3	; 0x03
 998:	9c 81       	ldd	r25, Y+4	; 0x04
 99a:	00 97       	sbiw	r24, 0x00	; 0
 99c:	09 f4       	brne	.+2      	; 0x9a0 <Switch_enuInit+0x1e>
 99e:	5f c0       	rjmp	.+190    	; 0xa5e <Switch_enuInit+0xdc>

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < NUM_OF_SW ; ++Local_u8Iterator)
 9a0:	19 82       	std	Y+1, r1	; 0x01
 9a2:	58 c0       	rjmp	.+176    	; 0xa54 <Switch_enuInit+0xd2>
	{
		Local_enuErrorState = DIO_enuSetPinDir(
 9a4:	89 81       	ldd	r24, Y+1	; 0x01
 9a6:	28 2f       	mov	r18, r24
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	c9 01       	movw	r24, r18
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	28 0f       	add	r18, r24
 9b2:	39 1f       	adc	r19, r25
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	9c 81       	ldd	r25, Y+4	; 0x04
 9b8:	fc 01       	movw	r30, r24
 9ba:	e2 0f       	add	r30, r18
 9bc:	f3 1f       	adc	r31, r19
 9be:	40 81       	ld	r20, Z
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	c9 01       	movw	r24, r18
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	28 0f       	add	r18, r24
 9ce:	39 1f       	adc	r19, r25
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
 9d2:	9c 81       	ldd	r25, Y+4	; 0x04
 9d4:	fc 01       	movw	r30, r24
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	91 81       	ldd	r25, Z+1	; 0x01
 9dc:	84 2f       	mov	r24, r20
 9de:	69 2f       	mov	r22, r25
 9e0:	40 e0       	ldi	r20, 0x00	; 0
 9e2:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_enuSetPinDir>
 9e6:	8a 83       	std	Y+2, r24	; 0x02
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PortID,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PinID ,
				DIO_u8INPUT
		);

		Local_enuErrorState = DIO_enuSetPinVal(
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	c9 01       	movw	r24, r18
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	28 0f       	add	r18, r24
 9f6:	39 1f       	adc	r19, r25
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	9c 81       	ldd	r25, Y+4	; 0x04
 9fc:	fc 01       	movw	r30, r24
 9fe:	e2 0f       	add	r30, r18
 a00:	f3 1f       	adc	r31, r19
 a02:	50 81       	ld	r21, Z
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	28 2f       	mov	r18, r24
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	c9 01       	movw	r24, r18
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	28 0f       	add	r18, r24
 a12:	39 1f       	adc	r19, r25
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	9c 81       	ldd	r25, Y+4	; 0x04
 a18:	fc 01       	movw	r30, r24
 a1a:	e2 0f       	add	r30, r18
 a1c:	f3 1f       	adc	r31, r19
 a1e:	41 81       	ldd	r20, Z+1	; 0x01
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	28 2f       	mov	r18, r24
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	c9 01       	movw	r24, r18
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	28 0f       	add	r18, r24
 a2e:	39 1f       	adc	r19, r25
 a30:	8b 81       	ldd	r24, Y+3	; 0x03
 a32:	9c 81       	ldd	r25, Y+4	; 0x04
 a34:	fc 01       	movw	r30, r24
 a36:	e2 0f       	add	r30, r18
 a38:	f3 1f       	adc	r31, r19
 a3a:	92 81       	ldd	r25, Z+2	; 0x02
 a3c:	85 2f       	mov	r24, r21
 a3e:	64 2f       	mov	r22, r20
 a40:	49 2f       	mov	r20, r25
 a42:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPinVal>
 a46:	8a 83       	std	Y+2, r24	; 0x02
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PortID,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PinID ,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_Status
		);

		if (Local_enuErrorState != ES_OK) break;
 a48:	8a 81       	ldd	r24, Y+2	; 0x02
 a4a:	88 23       	and	r24, r24
 a4c:	51 f4       	brne	.+20     	; 0xa62 <Switch_enuInit+0xe0>

	if(Copy_ArrStrSwitchState != NULL){

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < NUM_OF_SW ; ++Local_u8Iterator)
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	8f 5f       	subi	r24, 0xFF	; 255
 a52:	89 83       	std	Y+1, r24	; 0x01
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	83 30       	cpi	r24, 0x03	; 3
 a58:	08 f4       	brcc	.+2      	; 0xa5c <Switch_enuInit+0xda>
 a5a:	a4 cf       	rjmp	.-184    	; 0x9a4 <Switch_enuInit+0x22>
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Switch_enuInit+0xe0>

		if (Local_enuErrorState != ES_OK) break;

	}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
 a62:	8a 81       	ldd	r24, Y+2	; 0x02

}
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	cf 91       	pop	r28
 a6e:	df 91       	pop	r29
 a70:	08 95       	ret

00000a72 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t* Copy_ArrStrSwitchState , u8* Copy_pu8State){
 a72:	df 93       	push	r29
 a74:	cf 93       	push	r28
 a76:	00 d0       	rcall	.+0      	; 0xa78 <Switch_enuGetState+0x6>
 a78:	00 d0       	rcall	.+0      	; 0xa7a <Switch_enuGetState+0x8>
 a7a:	0f 92       	push	r0
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	9b 83       	std	Y+3, r25	; 0x03
 a82:	8a 83       	std	Y+2, r24	; 0x02
 a84:	7d 83       	std	Y+5, r23	; 0x05
 a86:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
 a88:	81 e0       	ldi	r24, 0x01	; 1
 a8a:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8State != NULL && Copy_ArrStrSwitchState != NULL )
 a8c:	8c 81       	ldd	r24, Y+4	; 0x04
 a8e:	9d 81       	ldd	r25, Y+5	; 0x05
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	91 f0       	breq	.+36     	; 0xab8 <Switch_enuGetState+0x46>
 a94:	8a 81       	ldd	r24, Y+2	; 0x02
 a96:	9b 81       	ldd	r25, Y+3	; 0x03
 a98:	00 97       	sbiw	r24, 0x00	; 0
 a9a:	71 f0       	breq	.+28     	; 0xab8 <Switch_enuGetState+0x46>
	{
		Local_enuErrorState = DIO_enuGetPinVal(
 a9c:	ea 81       	ldd	r30, Y+2	; 0x02
 a9e:	fb 81       	ldd	r31, Y+3	; 0x03
 aa0:	80 81       	ld	r24, Z
 aa2:	ea 81       	ldd	r30, Y+2	; 0x02
 aa4:	fb 81       	ldd	r31, Y+3	; 0x03
 aa6:	91 81       	ldd	r25, Z+1	; 0x01
 aa8:	2c 81       	ldd	r18, Y+4	; 0x04
 aaa:	3d 81       	ldd	r19, Y+5	; 0x05
 aac:	69 2f       	mov	r22, r25
 aae:	a9 01       	movw	r20, r18
 ab0:	0e 94 23 04 	call	0x846	; 0x846 <DIO_enuGetPinVal>
 ab4:	89 83       	std	Y+1, r24	; 0x01
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <Switch_enuGetState+0x4a>
				Copy_ArrStrSwitchState->SW_PortID,
				Copy_ArrStrSwitchState->SW_PinID ,
				Copy_pu8State
		);
	}
	else Local_enuErrorState = ES_NULL_POINTER;
 ab8:	82 e0       	ldi	r24, 0x02	; 2
 aba:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 abc:	89 81       	ldd	r24, Y+1	; 0x01

}
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	0f 90       	pop	r0
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	cf 91       	pop	r28
 aca:	df 91       	pop	r29
 acc:	08 95       	ret

00000ace <main>:


extern SW_t Switch_ArrStrSwitchState[NUM_OF_SW] ;

int main()
{
 ace:	df 93       	push	r29
 ad0:	cf 93       	push	r28
 ad2:	0f 92       	push	r0
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
 ad8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>

	Switch_enuInit(Switch_ArrStrSwitchState);
 adc:	80 e6       	ldi	r24, 0x60	; 96
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 c1 04 	call	0x982	; 0x982 <Switch_enuInit>
	u8 SwState;
	while(1)
	{
		Switch_enuGetState(Switch_ArrStrSwitchState , &SwState );
 ae4:	80 e6       	ldi	r24, 0x60	; 96
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	9e 01       	movw	r18, r28
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	b9 01       	movw	r22, r18
 af0:	0e 94 39 05 	call	0xa72	; 0xa72 <Switch_enuGetState>

		if(SwState == 1){
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	81 30       	cpi	r24, 0x01	; 1
 af8:	31 f4       	brne	.+12     	; 0xb06 <main+0x38>
			DIO_enuSetPinVal(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8HIGH );
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	41 e0       	ldi	r20, 0x01	; 1
 b00:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPinVal>
 b04:	ef cf       	rjmp	.-34     	; 0xae4 <main+0x16>
		}
		else
		{
			DIO_enuSetPinVal(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8LOW );
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	60 e0       	ldi	r22, 0x00	; 0
 b0a:	40 e0       	ldi	r20, 0x00	; 0
 b0c:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_enuSetPinVal>
 b10:	e9 cf       	rjmp	.-46     	; 0xae4 <main+0x16>

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
